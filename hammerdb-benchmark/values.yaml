# Copyright 2021 EnterpriseDB Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cnp:
  # -- Whether the benchmark should be run against an existing cluster
  # or a new one has to be created
  existingCluster: false
  # -- The name of a Secret of type basic-auth containing the existing cluster credentials for a superuser
  existingSuperuserCredentials: ""
  # -- The address of the existing cluster
  existingHost: ""
  # -- The amount of PostgreSQL instances in the CNP Cluster.
  instances: 1
  # -- The PostgreSQL image used by CNP and HammerDB.
  image: quay.io/enterprisedb/postgresql:14.1
  storage:
    # -- The storage class used to create PVCs for CNP instances.
    storageClass: ""
    # -- The size of the PVCs used by CNP instances.
    size: 1Gi
  # -- Dictionary of key-value pairs used to define the nodes
  # where the cluster instances can run; used to avoid hammerdb and PostgreSQL
  # running on the same node.
  nodeSelector:
    workload: postgresql
  # -- Configures custom queries for monitoring.
  # The arrays accept a Dictionary made by name: string (resource name), key: string (resource data field containing the queries).
  # Documentation on the accepted values: https://docs.enterprisedb.io/cloud-native-postgresql/latest/monitoring/
  monitoring:
    customQueriesConfigMap: []
    customQueriesSecret: []
  # -- Dictionary of key-value pairs representing
  # PostgreSQL configuration.
  postgreSQLParameters:
    shared_buffers: '512MB'
    maintenance_work_mem: '128MB'
    log_checkpoints: "on"
    log_lock_waits: "on"
    log_min_duration_statement: '1000'
    log_statement: 'ddl'
    log_temp_files: '1024'
    log_autovacuum_min_duration: '1s'

  # Configuration of the pooler
  pooler:
    # -- The number of pooler replicas that receive the connections.
    # If >0 the benchmarks are run with connection pooling
    instances: 0
    nodeSelector:
      workload: pooler
    pgbouncer:
      # -- The pool mode, accepted values: session, transaction
      poolMode: session
      # -- PgBouncer configuration.
      parameters: {}

hammerdb:
  image: quay.io/enterprisedb/hammerdb:4.2
  # -- Dictionary of key-value pairs used to define the nodes
  # where the hammerdb pod can run; used to avoid hammerdb and PostgreSQL
  # running on the same node.
  nodeSelector:
    workload: hammerdb
  config:
    # -- Whether pgschemabuild should be run
    initialize: true
    # -- The tcl script that will be run to populate the database
    pgschemabuild: |-
        #!/bin/tclsh
        puts "SETTING CONFIGURATION"
        
        dbset db pg
        diset connection pg_host $::env(PGHOST)
        diset tpcc pg_superuser $::env(PGSUPERUSER)
        diset tpcc pg_superuserpass $::env(PGSUPERUSERPASS)
        #diset connection pg_port 5432
        diset tpcc pg_count_ware 8
        diset tpcc pg_num_vu 2
        diset tpcc pg_raiseerror true
        diset tpcc pg_driver timed
        print dict
        buildschema
        waittocomplete
    # -- Whether we should prewarm all used tables before running `pgrun` and
    # after running `pgschemabuild`
    pg_prewarm: true
    pgrun: |-
        #!/bin/tclsh
        dbset db pg
        diset connection pg_host $::env(PGHOST)
        diset tpcc pg_superuser $::env(PGSUPERUSER)
        diset tpcc pg_superuserpass $::env(PGSUPERUSERPASS)
        diset tpcc pg_rampup 0
        diset tpcc pg_duration 1
        diset tpcc pg_vacuum true
        print dict
        vuset logtotemp 1
        loadscript
        print script
        vuset vu 1
        vucreate
        vurun
        runtimer 1200
        vudestroy
        exit
